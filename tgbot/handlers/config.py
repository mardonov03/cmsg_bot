import logging
from tgbot.keyboards.config import group_list, cancel, settings_keyboard, agreement_keyboard, group_ban_list, cencel_add_or_remove
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery
from tgbot.models.config import UsersModel, GroupModel, MessagesModel
from aiogram.fsm.context import FSMContext
from tgbot.states.config import UserState, SettingsState
from datetime import datetime, timedelta
from typing import Union

async def handle_start(message: Message, state: FSMContext, **kwargs) -> None:
    if message.chat.type in ['group', 'supergroup']:
        try:
            groupid = message.chat.id

            if not message.text.startswith('/start@PurifyAiBot'):
                return

            groupmodel: GroupModel = kwargs['groupmodel']

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                return

            result = await groupmodel.get_group(groupid)

            if not result:
                await groupmodel.add_group(groupid)

            is_user_creator = await groupmodel.is_user_creator(groupid, message.from_user.id)

            if is_user_creator['result'] == 'creator':

                status = await groupmodel.turn_on_off_bot(groupid, True)

                await message.answer('üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!' if status is True else 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!')
        except Exception as e:
            logging.error(f'"handle_start error (group):" {e}')

    elif message.chat.type == 'private':
        try:
            usersmodel: UsersModel = kwargs['usersmodel']

            userid = message.from_user.id
            user_data = await usersmodel.get_user(userid)

            user_agreement = await usersmodel.get_user_agreement(userid)

            if user_agreement['mesid']:
                try:
                    await message.bot.delete_message(message.chat.id, user_agreement['mesid'])
                except Exception as e:
                    logging.info(f'info delete_message23255: {e}')

            if not user_agreement['agreement_status']:
                await handle_user_agreement(message, **kwargs)
                return

            user_groups = await usersmodel.get_user_groups(userid)

            if not user_groups or not user_groups['status'] == 'ok':
                await message.answer('‚öô <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç</b>.\n\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º, –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', parse_mode='HTML')
                return

            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=group_list([i['name'] for i in user_groups['groups']]))
            await state.update_data(g_list=[[i['name'], i['groupid']] for i in user_groups['groups']])
            await state.update_data(action=message.text)
            await state.set_state(UserState.select_group_state)
        except Exception as e:
            logging.error(f'"handle_start error (private): {e}')

async def select_group_1(message:Message, state: FSMContext, **kwargs):
    if message.chat.type == 'private':
        try:
            usersmodel: UsersModel = kwargs['usersmodel']

            userid = message.from_user.id
            user_data = await usersmodel.get_user(userid)

            user_agreement = await usersmodel.get_user_agreement(userid)

            if user_agreement['mesid']:
                try:
                    await message.bot.delete_message(message.chat.id, user_agreement['mesid'])
                except Exception as e:
                    logging.info(f'info delete_message23255: {e}')

            if not user_agreement['agreement_status']:
                await handle_user_agreement(message, **kwargs)
                return

            user_groups = await usersmodel.get_user_groups(userid)

            if not user_groups or not user_groups['status'] == 'ok':
                await message.answer('‚öô <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç</b>.\n\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º, –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', parse_mode='HTML')
                return

            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=group_list([i['name'] for i in user_groups['groups']]))
            await state.update_data(g_list=[[i['name'], i['groupid']] for i in user_groups['groups']])
            await state.update_data(action=message.text)
            await state.set_state(UserState.select_group_state)
        except Exception as e:
            logging.error(f'"select_group_1 error": {e}')

async def select_group(message:Message, state:FSMContext, bot, **kwargs):
    if message.text == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏–∏.', reply_markup=cancel())
        return

    data = await state.get_data()

    g_list = data['g_list']

    selected_group = next((i for i in g_list if i[0] == message.text), None)

    if selected_group:
        groupid = selected_group[1]
        try:
            groupmodel: GroupModel = kwargs['groupmodel']
            is_user_creator = await groupmodel.is_user_creator(selected_group[1], message.from_user.id)

            if not is_user_creator['result'] == 'creator':
                await state.clear()
                await message.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã',reply_markup=cancel())
                return

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                return

            usersmodel: UsersModel = kwargs['usersmodel']

            if data['action'] and data['action'] in ['/remove', '/remove@PurifyAiBot']:
                action = 'remove'
            else:
                action = 'add'
            restult = await usersmodel.last_group_update(groupid, message.from_user.id, action)
            if restult:
                group = await groupmodel.get_group(groupid)
                if group['username']:
                    invite_link = f"https://t.me/{group['username']}"
                else:
                    invite_link = await bot.export_chat_invite_link(groupid)
                status = '‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'  if action == 'remove' else '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
                await message.answer(f'‚úÖ –ì—Ä—É–ø–ø–∞ <a href="{invite_link}"><b>{group["name"]}</b></a> –≤—ã–±—Ä–∞–Ω–∞ —É–¥–∞—á–Ω–æ\n\n<b>–°—Ç–∞—Ç—É—Å: {status}</b>', reply_markup=cancel(), disable_web_page_preview=True)
            else:
                await message.answer('–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É', reply_markup=cancel())
            await state.clear()
        except Exception as e:
            logging.error(f'"select_group error": {e}')


async def handle_stop(message: Message, **kwargs) -> None:
    if message.chat.type in ['group', 'supergroup']:
        try:
            groupid = message.chat.id

            if not message.text.startswith('/stop@PurifyAiBot'):
                return

            groupmodel: GroupModel = kwargs['groupmodel']

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                return

            result = await groupmodel.get_group(groupid)

            if not result:
                await groupmodel.add_group(groupid)

            is_user_creator = await groupmodel.is_user_creator(groupid, message.from_user.id)

            if is_user_creator['result'] == 'creator':
                status = await groupmodel.turn_on_off_bot(groupid, False)

                await message.answer('üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!' if status is True else 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!')
        except Exception as e:
            logging.error(f'"handle_stop error:" {e}')

async def on_bot_added(event: ChatMemberUpdated, **kwargs) -> None:
    try:
        if event.new_chat_member.user.id == event.bot.id:
            groupid = event.chat.id
            groupmodel: GroupModel = kwargs['groupmodel']

            try:
                result = await groupmodel.get_group(groupid)
                if not result:
                    await groupmodel.add_group(groupid)
            except Exception as e:
                logging.error(f'"on_bot_added (add bot to db) error": {e}')

            text = '‚öô–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.ü§ì\n\n–ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            if event.new_chat_member.status == 'administrator':
                permissions = await groupmodel.get_bot_privileges(groupid)

                if permissions['status'] == 'no':
                    text = '‚öô–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.ü§ì\n\n–Ø —Å–º–æ—Ç—Ä—é –º–Ω–µ —É–∂–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n\nüõ† –ù–æ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n' + "\n".join(permissions['missed'])
                else:
                    text = '‚öô–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.ü§ì\n\n–Ø —Å–º–æ—Ç—Ä—é –º–Ω–µ —É–∂–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞–±–æ—Ç–µ!'
                await register_creator(event, **kwargs)
            await event.bot.send_message(groupid, text)

    except Exception as e:
        logging.error(f'"on_bot_added error": {e}')

async def on_bot_deleted(event: ChatMemberUpdated, **kwargs) -> None:
    try:
        if event.old_chat_member.user.id == event.bot.id:
            groupid = event.chat.id
            groupmodel: GroupModel = kwargs['groupmodel']


            group_data = await groupmodel.get_group(groupid)

            creatorid = group_data['creator']
            groupname = group_data['name']
            if creatorid:
                try:
                    await event.bot.send_message(creatorid, f'‚ùï–ë–æ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã (<b>{groupname}</b>).\n\n–ü–æ—ç—Ç–æ–º—É –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã üëæ', parse_mode='HTML')
                except Exception as e:
                    logging.error(f'"on_bot_deleted (send message to creator) error": {e}')

            await groupmodel.delete_group(groupid)

    except Exception as e:
        logging.error(f'"on_bot_deleted error": {e}')

async def register_creator(event: ChatMemberUpdated, **kwargs) -> None:
    try:
        if event.new_chat_member.user.id == event.bot.id:
            groupid = event.chat.id

            try:
                groupmodel: GroupModel = kwargs['groupmodel']

                result = await groupmodel.get_group(groupid)
                if not result:
                    await groupmodel.add_group(groupid)
            except Exception as e:
                logging.error(f'"register_creator (add bot to db) error": {e}')

            admins = await event.bot.get_chat_administrators(groupid)

            creator = next((i for i in admins if i.status == 'creator'), None)

            if not creator:
                await event.bot.send_message(event.chat.id, '–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å—è –≥—Ä—É–ø–ø—ã.')
                return

            usersmodel: UsersModel = kwargs['usersmodel']

            res = await usersmodel.add_creator(groupid, creator.user.id)

            if not res:
                await event.bot.send_message(event.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')
                return
    except Exception as e:
        logging.error(f'"on_bot_added error": {e}')

class CheckMessage():
    @staticmethod
    async def check_message(message: Message, state: FSMContext, bot, **kwargs) -> None:
        groupid = message.chat.id
        userid = message.from_user.id
        try:
            groupmodel: GroupModel = kwargs['groupmodel']
            usersmodel: UsersModel = kwargs['usersmodel']

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                return

            status = await groupmodel.get_bot_status(groupid)

            if not status['status'] == 'ok' or not status['bot_status']:
                return

            user_privilage = await usersmodel.get_user_privilage(userid, groupid)

            if user_privilage['status'] == 'ok':
                if user_privilage['per_secundes'] is None:
                    return
                given_secundes = user_privilage['per_secundes']
                privilage_given_time = user_privilage['datanow']
                data_now = datetime.now()

                if not (data_now - privilage_given_time > timedelta(seconds=given_secundes)):
                    return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                return

            messagesmodel: MessagesModel = kwargs['messagesmodel']

            is_logs_on = await groupmodel.is_logs_on(groupid)

            if message.content_type == 'text':
                result = await messagesmodel.scan_message_text(message.text, groupid)
                if result['status'] == 'ok':
                    if result['is_banned'] == 'ok':
                        await message.bot.delete_message(groupid, message.message_id)
                        if is_logs_on['logs'] is True:
                            await message.bot.send_message(userid, f'Banned word: {str(result["banword"])}', parse_mode='HTML')
                return
            if message.content_type == 'sticker':
                is_banned = await messagesmodel.scan_message_sticker(message.sticker.file_unique_id, message.chat.id)

                if is_banned['status'] == 'ok' and is_banned['is_banned'] == 'ok':
                    await message.bot.delete_message(message.chat.id, message.message_id)
                    if is_logs_on['logs'] is True:
                        await message.bot.send_message(userid, f'Banned sticker id: <b>{is_banned["bansticker"]}</b>', parse_mode='HTML')
                return

            if message.content_type == 'animation':

                is_banned = await messagesmodel.scan_message_animation(message.animation.file_unique_id, message.chat.id)

                if is_banned['status'] == 'ok' and is_banned['is_banned'] == 'ok':
                    await message.bot.delete_message(message.chat.id, message.message_id)
                    if is_logs_on['logs'] is True:
                        await message.bot.send_message(userid, f'Banned gif id: <b>{is_banned["bangif"]}</b>', parse_mode='HTML')
                return

            if message.content_type == 'voice':

                is_banned = await messagesmodel.scan_message_voice(message.voice.file_unique_id, message.chat.id)

                if is_banned['status'] == 'ok' and is_banned['is_banned'] == 'ok':
                    await message.bot.delete_message(message.chat.id, message.message_id)
                    if is_logs_on['logs'] is True:
                        await message.bot.send_message(userid, f'Banned voice id: <b>{is_banned["voice"]}</b>',parse_mode='HTML')
                return

            if message.content_type == 'photo':
                is_banned = await messagesmodel.scan_message_photo(message, message.chat.id)
                if is_banned['status'] == 'ok' and is_banned['message_status'] == 'ban':
                    await message.bot.delete_message(message.chat.id, message.message_id)
                    if is_logs_on['logs'] is True:
                        await message.bot.send_message(userid, f'Banned photo id: <b>{is_banned["message_id"]}</b>', parse_mode='HTML')
                return
        except Exception as e:
            logging.error(f'"check_message error": {e}')


class RegisterMessage():
    @staticmethod
    async def register_message_add_delete(event: Union[Message, CallbackQuery], state: FSMContext, bot, **kwargs) -> None:
        if isinstance(event, CallbackQuery):
            message = event.message
            data = event.data
        else:
            message = event
            data = None
        userid = message.chat.id

        if userid == message.bot.id and not data:
            return

        if message.chat.type != 'private':
            return

        if message.from_user.id != userid and not data:
            return

        try:
            usersmodel = kwargs['usersmodel']
            groupmodel = kwargs['groupmodel']
            messagesmodel = kwargs['messagesmodel']

            user_agreement = await usersmodel.get_user_agreement(userid)

            if user_agreement['mesid']:
                try:
                    await message.bot.delete_message(message.chat.id, user_agreement['mesid'])
                except Exception as e:
                    logging.info(f'info delete_message23255: {e}')

            if not user_agreement['agreement_status']:
                await handle_user_agreement(message, **kwargs)
                return

            if not data:
                last_group = await messagesmodel.get_last_group(userid)

                if not last_group['last_group_update']:
                    user_groups = await usersmodel.get_user_groups(userid)
                    if not user_groups or user_groups['status'] != 'ok':
                        await message.answer('‚öô <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º, –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', parse_mode='HTML')
                        return

                    await message.answer('–°—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=group_list([i['name'] for i in user_groups['groups']]))
                    await state.update_data(g_list=[[i['name'], i['groupid']] for i in user_groups['groups']])
                    await state.update_data(action=message.text)
                    await state.set_state(UserState.select_group_state)
                    return

                groupid = last_group['last_group_update']
                action = last_group['action']
                is_colback = None
                content_type = message.content_type
                file_id = RegisterMessage.extract_file_id(message)
            else:
                parts = data.split('|')
                cancel_data = await messagesmodel.get_cancel_data(userid, message.message_id)
                is_colback = parts[0]
                if not cancel_data:
                    await message.edit_text('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')
                    return

                groupid, action, file_id, content_type = cancel_data['groupid'], cancel_data['action'], cancel_data['file_id'], cancel_data['content_type']
                action = 'remove' if action == 'add' else 'add'
            is_user_creator = await groupmodel.is_user_creator(groupid, userid)

            if is_user_creator['result'] != 'creator':
                await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.')
                return

            group = await groupmodel.get_group(groupid)
            invite_link = f"https://t.me/{group['username']}" if group['username'] else await bot.export_chat_invite_link(groupid)

            if not action and not is_colback:
                last_group = await messagesmodel.get_last_group(userid)
                action = last_group['action']

            if action == 'remove':
                result = await messagesmodel.delete_ban_message(groupid, content_type, file_id)

                if result['status'] == 'ok':
                    if is_colback:
                        await message.edit_text(f'{RegisterMessage.get_content_icon(content_type)} <b>—É–¥–∞–ª—ë–Ω</b>üóë –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{file_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                    else:
                        mes = await message.answer(f'{RegisterMessage.get_content_icon(content_type)} <b>—É–¥–∞–ª—ë–Ω</b>üóë –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{file_id}</b>',parse_mode='HTML', disable_web_page_preview=True, reply_markup=cencel_add_or_remove([userid]))
                        await messagesmodel.add_message_cancel(groupid, file_id, content_type, action, mes.message_id, userid)
                else:
                    await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
            elif action == 'add':
                result = await messagesmodel.register_ban_message(groupid, content_type, file_id)

                if result['status'] == 'ok':
                    if is_colback:
                        await message.edit_text(f'{RegisterMessage.get_content_icon(content_type)} <b>–¥–æ–±–∞–≤–ª–µ–Ω</b>‚òëÔ∏è –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{file_id}</b>', parse_mode='HTML', disable_web_page_preview=True)
                    else:
                        mes = await message.answer(f'{RegisterMessage.get_content_icon(content_type)} <b>–¥–æ–±–∞–≤–ª–µ–Ω</b>‚òëÔ∏è –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{file_id}</b>', parse_mode='HTML', disable_web_page_preview=True, reply_markup=cencel_add_or_remove([userid]))
                        await messagesmodel.add_message_cancel(groupid, file_id, content_type, action, mes.message_id, userid)
                else:
                    await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–ø—Ä–µ—Ç—ã.')

        except Exception as e:
            logging.error(f'register_message_add_delete error: {e}')

    @staticmethod
    def extract_file_id(message: Message):
        if message.content_type == 'text':
            return message.text
        if message.content_type == 'sticker':
            return message.sticker.file_unique_id
        if message.content_type == 'animation':
            return message.animation.file_unique_id
        if message.content_type == 'voice':
            return message.voice.file_unique_id
        if message.content_type == 'document':
            return message.document.file_unique_id
        if message.content_type == 'photo':
            return message.photo[-1].file_unique_id
        if message.content_type == 'video':
            return message.video.file_unique_id
        if message.content_type == 'video_note':
            return message.video_note.file_unique_id
        return None

    @staticmethod
    def get_content_icon(content_type: str) -> str:
        return {
            'text': 'üìÑ –°–ª–æ–≤–æ',
            'sticker': 'üîÆ –°—Ç–∏–∫–µ—Ä',
            'animation': 'üéû –ì–∏—Ñ',
            'voice': 'üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ',
            'document': 'üíæ –î–æ–∫—É–º–µ–Ω—Ç',
            'photo': 'üñº –§–æ—Ç–æ',
            'video': 'üìπ –í–∏–¥–µ–æ',
            'video_note': 'üì∑ –ö—Ä—É–∂–æ–∫'
        }.get(content_type, 'üìå –ö–æ–Ω—Ç–µ–Ω—Ç')



    @staticmethod
    async def get_message_list(message: Message, state:FSMContext, **kwargs) -> None:
        if not message.chat.type == 'private':
            return
        try:
            usersmodel: UsersModel = kwargs['usersmodel']

            userid = message.from_user.id
            user_data = await usersmodel.get_user(userid)

            user_agreement = await usersmodel.get_user_agreement(userid)

            if user_agreement['mesid']:
                try:
                    await message.bot.delete_message(message.chat.id, user_agreement['mesid'])
                except Exception as e:
                    logging.info(f'info delete_message23255: {e}')

            if not user_agreement['agreement_status']:
                await handle_user_agreement(message, **kwargs)
                return

            user_groups = await usersmodel.get_user_groups(userid)

            if not user_groups or not user_groups['status'] == 'ok':
                await message.answer('‚öô <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç</b>.\n\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º, –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', parse_mode='HTML')
                return

            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=group_list([i['name'] for i in user_groups['groups']]))
            await state.update_data(g_list=[[i['name'], i['groupid']] for i in user_groups['groups']])
            await state.set_state(UserState.get_ban_list_state)
        except Exception as e:
            logging.error(f'"get_message_list error": {e}')

    @staticmethod
    async def get_ban_list(message:Message, state:FSMContext, **kwargs):
        if message.text == '–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏–∏.', reply_markup=cancel())
            return

        data = await state.get_data()

        g_list = data['g_list']

        selected_group = next((i for i in g_list if i[0] == message.text), None)

        groupmodel: GroupModel = kwargs['groupmodel']
        if selected_group:
            groupid = selected_group[1]
            is_user_creator = await groupmodel.is_user_creator(groupid, message.from_user.id)

            if not is_user_creator['result'] == 'creator':
                await state.clear()
                await message.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã',reply_markup=cancel())
                return

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                return


            try:
                action_list = ['—Ç–µ–∫—Å—Ç', '—Å—Ç–∏–∫–µ—Ä', '–≥–∏—Ñ', '–≥–æ–ª–æ—Å–æ–≤–æ–µ', '–¥–æ–∫—É–º–µ–Ω—Ç', '—Ñ–æ—Ç–æ', '–≤–∏–¥–µ–æ', '–≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫']
                await message.answer('–°–ø–∏—Å–æ–∫ —á–µ–≥–æ –≤–∞–º –Ω—É–∂–µ–Ω?', reply_markup=group_ban_list(action_list))
                await state.update_data(action_list=action_list, group_id=groupid, groupname= selected_group[0])
                await state.set_state(UserState.get_ban_list_state_2)
            except Exception as e:
                logging.error(f'"get_ban_list error": {e}')

    @staticmethod
    async def get_ban_list_2(message:Message, state:FSMContext, **kwargs):
        if message.text == '–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏–∏.', reply_markup=cancel())
            return

        data = await state.get_data()

        if not message.text in data['action_list'] and not message.text == '–≤—Å–µ':
            action_list = ['—Ç–µ–∫—Å—Ç', '—Å—Ç–∏–∫–µ—Ä', '–≥–∏—Ñ', '–≥–æ–ª–æ—Å–æ–≤–æ–µ', '–¥–æ–∫—É–º–µ–Ω—Ç', '—Ñ–æ—Ç–æ', '–≤–∏–¥–µ–æ', '–≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫']
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞, –ø–æ–∂–∞–ª—é—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥', reply_markup=group_ban_list(action_list))
            await state.set_state(UserState.get_ban_list_state_2)
            return

        action_list_db_form = {'—Ç–µ–∫—Å—Ç': 'text', '—Å—Ç–∏–∫–µ—Ä': 'sticker', '–≥–∏—Ñ': 'animation', '–≥–æ–ª–æ—Å–æ–≤–æ–µ': 'voice', '–¥–æ–∫—É–º–µ–Ω—Ç': 'document', '—Ñ–æ—Ç–æ': 'photo', '–≤–∏–¥–µ–æ': 'video', '–≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫': 'video_note', '–≤—Å–µ': 'all'}

        action = action_list_db_form[message.text]
        groupid = data['group_id']
        groupname= data['groupname']

        groupmodel: GroupModel = kwargs['groupmodel']

        is_user_creator = await groupmodel.is_user_creator(groupid, message.from_user.id)

        if not is_user_creator['result'] == 'creator':
            await state.clear()
            await message.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã',reply_markup=cancel())
            return

        try:
            ban_list = await groupmodel.get_ban_words(groupid, action)

            sorted_list = sorted(ban_list, key=lambda x: str(x['message_id']))
            chunks = [sorted_list[i:i + 4] for i in range(0, len(sorted_list), 4)]

            text = f'üìã–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ–≥–µ–Ω—ã—Ö {action} –≤ –≥—Ä—É–ø–ø–µ <b>{groupname}</b>:\n\n'
            text += '\n'.join([', '.join(f"<b>{i['message_id']}</b>" for i in chunk) for chunk in chunks])

            await message.answer(text, reply_markup=cancel(), parse_mode='HTML')

            await state.clear()
        except Exception as e:
            logging.error(f'"get_ban_list error": {e}')

class SettingsClass():
    @staticmethod
    async def handle_settings(message: Message, state: FSMContext, **kwargs) -> None:
        groupmodel: GroupModel = kwargs['groupmodel']
        if message.chat.type != 'private':
            if not message.text.startswith('/settings@PurifyAiBot'):
                return

            result = await groupmodel.get_group(message.chat.id)

            if not result:
                await groupmodel.add_group(message.chat.id)

            is_user_creator = await groupmodel.is_user_creator(message.chat.id, message.from_user.id)
            if is_user_creator['result'] != 'creator':
                return

            is_bot_admin = await groupmodel.is_bot_admin(message.chat.id)

            if not is_bot_admin:
                await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            permissions = await groupmodel.get_bot_privileges(message.chat.id)

            if permissions['status'] == 'no':
                await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                return

            usersmodel: UsersModel = kwargs['usersmodel']

            userid = message.from_user.id
            user_data = await usersmodel.get_user(userid)

            user_agreement = await usersmodel.get_user_agreement(userid)

            if user_agreement['mesid']:
                try:
                    await message.bot.delete_message(message.from_user.id, user_agreement['mesid'])
                except Exception as e:
                    logging.info(f'info delete_message63723: {e}')

            if not user_agreement['agreement_status']:
                await handle_user_agreement(message, **kwargs)
                await message.answer("‚öôÔ∏è <b>–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n–í–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º.",parse_mode="HTML")

                return


            await message.answer('üëæ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ. –ú–µ–Ω—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')

            settings = await groupmodel.get_group_settings(message.chat.id)
            mes = await message.bot.send_message(message.from_user.id ,'–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞.', reply_markup=cancel())
            await message.bot.delete_message(message.from_user.id, mes.message_id)
            await state.clear()
            await message.bot.send_message(message.from_user.id, f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{message.chat.full_name}</b>', reply_markup=settings_keyboard(settings), parse_mode='HTML')
        else:
            usersmodel: UsersModel = kwargs['usersmodel']

            userid = message.from_user.id
            user_data = await usersmodel.get_user(userid)

            user_agreement = await usersmodel.get_user_agreement(userid)

            if user_agreement['mesid']:
                try:
                    await message.bot.delete_message(message.chat.id, user_agreement['mesid'])
                except Exception as e:
                    logging.info(f'info delete_message23255: {e}')

            if not user_agreement['agreement_status']:
                await handle_user_agreement(message, **kwargs)
                return

            user_groups = await usersmodel.get_user_groups(userid)

            if not user_groups or not user_groups['status'] == 'ok':
                await message.answer('‚öô <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç</b>.\n\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º, –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', parse_mode='HTML')
                return

            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',reply_markup=group_list([i['name'] for i in user_groups['groups']]))
            await state.update_data(g_list=[[i['name'], i['groupid']] for i in user_groups['groups']])
            await state.set_state(SettingsState.settngs_select_group_state)

    @staticmethod
    async def settngs_select_group(message: Message, state: FSMContext, **kwargs):
        if message.text == '–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏–∏.', reply_markup=cancel())
            return

        data = await state.get_data()

        g_list = data['g_list']

        selected_group = next((i for i in g_list if i[0] == message.text), None)

        if selected_group:
            groupid = selected_group[1]
            try:
                groupmodel: GroupModel = kwargs['groupmodel']
                is_user_creator = await groupmodel.is_user_creator(groupid, message.from_user.id)

                if not is_user_creator['result'] == 'creator':
                    await state.clear()
                    await message.answer('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã', reply_markup=cancel())
                    return

                is_bot_admin = await groupmodel.is_bot_admin(groupid)

                if not is_bot_admin:
                    await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return

                permissions = await groupmodel.get_bot_privileges(groupid)

                if permissions['status'] == 'no':
                    await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                    return

                settings = await groupmodel.get_group_settings(groupid)
                if settings['status'] == 'ok':
                    mes = await message.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞.',reply_markup=cancel())
                    await message.bot.delete_message(message.chat.id, mes.message_id)
                    await message.bot.send_message(message.from_user.id, f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã: <b>{selected_group[0]}</b>',reply_markup=settings_keyboard(settings), parse_mode='HTML')
                await state.clear()
            except Exception as e:
                logging.error(f'"select_group error": {e}')

    @staticmethod
    async def toggle_settings_callback(callback_query: CallbackQuery, **kwargs):
        groupmodel = kwargs['groupmodel']
        setting_name = callback_query.data.replace("toggle_", "")
        group_id = int(callback_query.data.split("gid_")[-1])

        is_user_creator = await groupmodel.is_user_creator(int(callback_query.data.split("gid_")[-1]), callback_query.from_user.id)
        if not is_user_creator['result'] == 'creator':
            await callback_query.message.edit_text('–í—ã —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã', reply_markup=cancel())
            return

        is_bot_admin = await groupmodel.is_bot_admin(group_id)

        if not is_bot_admin:
            await callback_query.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        permissions = await groupmodel.get_bot_privileges(group_id)

        if permissions['status'] == 'no':
            await callback_query.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
            return


        if setting_name.startswith('close_settings'):
            await callback_query.message.edit_text('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            return

        result = await groupmodel.toggle_setting(group_id, setting_name)

        if result['status'] == 'ok':
            settings = await groupmodel.get_group_settings(group_id)

            await callback_query.message.edit_reply_markup(reply_markup=settings_keyboard(settings))
        else:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏")

async def handle_user_agreement(message: Message, **kwargs):
    try:
        text = ("<b>üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b>\n\n–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º\n\nüá∑üá∫ Ru: <b><a href='https://telegra.ph/Polzovatelskoe-Soglashenie-PurifyAi-04-13-2'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ</a> </b>.\n\nüá∫üá∏ En: <b><a href='https://telegra.ph/User-Agreement-PurifyAi-04-13'>User Agreement</a> </b>.\n\nüá∫üáø Uz: <b><a href='https://telegra.ph/Foydalanuvchi-Shartnomasi-PurifyAi-04-13'>Foydalanuvchi Shartnomasi</a> </b>.\n\n–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏?")
        mes = await message.bot.send_message(message.from_user.id, text, reply_markup=agreement_keyboard(), parse_mode="HTML", disable_web_page_preview=True)
        usersmodel: UsersModel = kwargs['usersmodel']

        await usersmodel.update_agreement_mesid(message.from_user.id, mes.message_id)
    except Exception as e:
        logging.error(f'"handle_user_agreement error": {e}')

async def handle_user_agreement_selected(callback_query: CallbackQuery, **kwargs):
    userid = callback_query.from_user.id
    selected = callback_query.data.replace('agreement_', '')
    try:

        usersmodel: UsersModel = kwargs['usersmodel']

        if selected == 'yes':
            res = await usersmodel.agreement_yes(userid)
            if res['status'] == 'ok':
                await callback_query.message.edit_text("<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b>.\n\nüá∑üá∫ Ru: <b><a href='https://telegra.ph/Polzovatelskoe-Soglashenie-PurifyAi-04-13-2'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ</a> </b>.\n\nüá∫üá∏ En: <b><a href='https://telegra.ph/User-Agreement-PurifyAi-04-13'>User Agreement</a> </b>.\n\nüá∫üáø Uz: <b><a href='https://telegra.ph/Foydalanuvchi-Shartnomasi-PurifyAi-04-13'>Foydalanuvchi Shartnomasi</a> </b>.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!",parse_mode="HTML", disable_web_page_preview=True)
                await callback_query.message.chat.pin_message(callback_query.message.message_id)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –¥–æ—Å—Ç—É–ø –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",show_alert=True)
        elif selected == 'no':
            await callback_query.message.edit_text("<b>‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.</b>\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è.",parse_mode="HTML")
            await callback_query.message.chat.pin_message(callback_query.message.message_id)
    except Exception as e:
        logging.error(f'"handle_user_agreement_selected error": {e}')
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def info_command(message: Message):
    text = ('‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º Telegram-–≥—Ä—É–ø–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n'
            '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É:</b>\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n'
            '<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º:</b>\n–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—ë –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n'
            '<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>\n–î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞, —Å—Ç–∏–∫–µ—Ä—ã, GIF –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n\n'
            '<b>NSFW-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b>\n–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏ —Å—Ç–∏–∫–µ—Ä–∞—Ö, —É–¥–∞–ª—è—è –∏—Ö –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏.\n\n'
            '<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏:</b>\n–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –≤—ã–±–∏—Ä–∞—è –∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.\n\n'
            '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:</b>\nüá∑üá∫ Ru: <b><a href="https://telegra.ph/Polzovatelskoe-Soglashenie-PurifyAi-04-13-2">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ</a></b>.\n\nüá∫üá∏ En: <b><a href="https://telegra.ph/User-Agreement-PurifyAi-04-13">User Agreement</a></b>.\n\nüá∫üáø Uz: <b><a href="https://telegra.ph/Foydalanuvchi-Shartnomasi-PurifyAi-04-13">Foydalanuvchi Shartnomasi</a></b>.')
    if message.chat.type == 'private':
        try:
            await message.answer(text, parse_mode='HTML', disable_web_page_preview=True)
        except Exception as e:
            logging.error(f'"help_command private error:" {e}')
    else:
        if message.text != '/info@PurifyAiBot':
            return
        try:
            await message.answer(text,parse_mode='HTML', disable_web_page_preview=True)
        except Exception as e:
            logging.error(f'"help_command group error:" {e}')