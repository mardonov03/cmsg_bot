import logging
from tgbot.keyboards.config import group_list, cancel
from aiogram.types import Message, ChatMemberUpdated
from tgbot.models.config import UsersModel, GroupModel, MessagesModel
from aiogram.fsm.context import FSMContext
from tgbot.states.config import UserState
import opennsfw2 as n2
import os
from datetime import datetime, timedelta

async def handle_start(message: Message, state: FSMContext, **kwargs) -> None:
    if message.chat.type in ['group', 'supergroup']:
        try:
            groupid = message.chat.id

            if not message.text.startswith('/start@cleanermsgbot'):
                return

            groupmodel: GroupModel = kwargs['groupmodel']

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                return

            result = await groupmodel.get_group(groupid)

            if not result:
                await groupmodel.add_group(groupid)

            is_user_creator = await groupmodel.is_user_creator(groupid, message.from_user.id)

            if is_user_creator['result'] == 'creator':

                status = await groupmodel.turn_on_off_bot(groupid, True)

                await message.answer('üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!' if status is True else 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!')
        except Exception as e:
            logging.error(f'"handle_start error (group):" {e}')

    elif message.chat.type == 'private':
        try:
            usersmodel: UsersModel = kwargs['usersmodel']

            userid = message.from_user.id
            user_data = await usersmodel.get_user(userid)

            user_groups = await usersmodel.get_user_groups(userid)

            if not user_groups or not user_groups['status'] == 'ok':
                await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø')
                return

            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=group_list([i['name'] for i in user_groups['groups']]))
            await state.update_data(g_list=[[i['name'], i['groupid']] for i in user_groups['groups']])
            await state.update_data(action=message.text)
            await state.set_state(UserState.select_group_state)
        except Exception as e:
            logging.error(f'"handle_start error (private": {e}')

async def select_group(message:Message, state:FSMContext, **kwargs):
    if message.text == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏–∏.', reply_markup=cancel())
        return

    data = await state.get_data()

    g_list = data['g_list']

    selected_group = next((i for i in g_list if i[0] == message.text), None)

    if selected_group:
        groupid = selected_group[1]
        try:
            usersmodel: UsersModel = kwargs['usersmodel']

            if data['action'] and data['action']=='/remove':
                action = 'remove'
            else:
                action = 'add'
            restult = await usersmodel.last_group_update(groupid, message.from_user.id, action)
            if restult:
                await message.answer('–ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞ —É–¥–∞—á–Ω–æ', reply_markup=cancel())
            else:
                await message.answer('–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É', reply_markup=cancel())
            await state.clear()
        except Exception as e:
            logging.error(f'"select_group error": {e}')


async def handle_stop(message: Message, **kwargs) -> None:
    if message.chat.type in ['group', 'supergroup']:
        try:
            groupid = message.chat.id

            if not message.text.startswith('/stop@cleanermsgbot'):
                return

            groupmodel: GroupModel = kwargs['groupmodel']

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                return

            result = await groupmodel.get_group(groupid)

            if not result:
                await groupmodel.add_group(groupid)

            is_user_creator = await groupmodel.is_user_creator(groupid, message.from_user.id)

            if is_user_creator['result'] == 'creator':
                status = await groupmodel.turn_on_off_bot(groupid, False)

                await message.answer('üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!' if status is True else 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!')
        except Exception as e:
            logging.error(f'"handle_stop error:" {e}')

async def handle_settings(message: Message, **kwargs) -> None:
    if message.chat.type == 'private':
        try:
            groupid = message.chat.id

            if not message.text.startswith('/stop@cleanermsgbot'):
                return

            groupmodel: GroupModel = kwargs['groupmodel']

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                await message.answer("üõ† –ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                await message.answer(f"üõ† –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n" + "\n".join(permissions['missed']))
                return

            result = await groupmodel.get_group(groupid)

            if not result:
                await groupmodel.add_group(groupid)

            is_user_creator = await groupmodel.is_user_creator(groupid, message.from_user.id)

            if is_user_creator['result'] == 'creator':
                status = await groupmodel.turn_on_off_bot(groupid, False)

                await message.answer('üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!' if status is True else 'üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!')
        except Exception as e:
            logging.error(f'"handle_stop error:" {e}')

async def on_bot_added(event: ChatMemberUpdated, **kwargs) -> None:
    try:
        if event.new_chat_member.user.id == event.bot.id:
            groupid = event.chat.id
            groupmodel: GroupModel = kwargs['groupmodel']

            try:
                result = await groupmodel.get_group(groupid)
                if not result:
                    await groupmodel.add_group(groupid)
            except Exception as e:
                logging.error(f'"on_bot_added (add bot to db) error": {e}')

            text = '‚öô–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.ü§ì\n\n–ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞:\n\n‚úîÔ∏è–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚úîÔ∏è–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
            if event.new_chat_member.status == 'administrator':
                permissions = await groupmodel.get_bot_privileges(groupid)

                if permissions['status'] == 'no':
                    text = '‚öô–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.ü§ì\n\n–Ø —Å–º–æ—Ç—Ä—é –º–Ω–µ —É–∂–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n\nüõ† –ù–æ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤:\n\n' + "\n".join(permissions['missed'])
                else:
                    text = '‚öô–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.ü§ì\n\n–Ø —Å–º–æ—Ç—Ä—é –º–Ω–µ —É–∂–µ –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞–±–æ—Ç–µ!'
                await register_creator(event, **kwargs)
            await event.bot.send_message(groupid, text)

    except Exception as e:
        logging.error(f'"on_bot_added error": {e}')

async def on_bot_deleted(event: ChatMemberUpdated, **kwargs) -> None:
    try:
        if event.old_chat_member.user.id == event.bot.id:
            groupid = event.chat.id
            groupmodel: GroupModel = kwargs['groupmodel']


            group_data = await groupmodel.get_group(groupid)

            creatorid = group_data['creator']
            groupname = group_data['name']
            if creatorid:
                try:
                    await event.bot.send_message(creatorid, f'‚ùï–ë–æ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã (<b>{groupname}</b>).\n\n–ü–æ—ç—Ç–æ–º—É –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã üëæ', parse_mode='HTML')
                except Exception as e:
                    logging.error(f'"on_bot_deleted (send message to creator) error": {e}')

            await groupmodel.delete_group(groupid)

    except Exception as e:
        logging.error(f'"on_bot_deleted error": {e}')

async def register_creator(event: ChatMemberUpdated, **kwargs) -> None:
    try:
        if event.new_chat_member.user.id == event.bot.id:
            groupid = event.chat.id

            try:
                groupmodel: GroupModel = kwargs['groupmodel']

                result = await groupmodel.get_group(groupid)
                if not result:
                    await groupmodel.add_group(groupid)
            except Exception as e:
                logging.error(f'"register_creator (add bot to db) error": {e}')

            admins = await event.bot.get_chat_administrators(groupid)

            creator = next((i for i in admins if i.status == 'creator'), None)

            if not creator:
                await event.bot.send_message(event.chat.id, '–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å—è –≥—Ä—É–ø–ø—ã.')
                return

            usersmodel: UsersModel = kwargs['usersmodel']

            res = await usersmodel.add_creator(groupid, creator.user.id)

            if not res:
                await event.bot.send_message(event.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')
                return
    except Exception as e:
        logging.error(f'"on_bot_added error": {e}')

class CheckMessage():
    @staticmethod
    async def check_message(message: Message, state: FSMContext, bot, **kwargs) -> None:
        groupid = message.chat.id
        userid = message.from_user.id
        try:
            groupmodel: GroupModel = kwargs['groupmodel']
            usersmodel: UsersModel = kwargs['usersmodel']

            is_bot_admin = await groupmodel.is_bot_admin(groupid)

            if not is_bot_admin:
                return

            status = await groupmodel.get_bot_status(groupid)

            if not status['status'] == 'ok' or not status['bot_status']:
                return

            user_privilage = await usersmodel.get_user_privilage(userid, groupid)

            if user_privilage['status'] == 'ok':
                if user_privilage['per_secundes'] is None:
                    return
                given_secundes = user_privilage['per_secundes']
                privilage_given_time = user_privilage['datanow']
                data_now = datetime.now()

                if not (data_now - privilage_given_time > timedelta(seconds=given_secundes)):
                    return

            permissions = await groupmodel.get_bot_privileges(groupid)

            if permissions['status'] == 'no':
                return

            messagesmodel: MessagesModel = kwargs['messagesmodel']

            is_logs_on = await groupmodel.is_logs_on(groupid)

            if message.content_type == 'text':
                result = await messagesmodel.scan_message_text(message.text, groupid)
                if result['status'] == 'ok':
                    if result['is_banned'] == 'ok':
                        await message.bot.delete_message(groupid, message.message_id)
                        if is_logs_on['logs'] is True:
                            await message.answer(f'Banned word: {str(result["banword"])}', parse_mode='HTML')
                return
            if message.content_type == 'photo':
                is_banned = await messagesmodel.scan_message_photo(message, message.chat.id)
                if is_banned['status'] == 'ok' and is_banned['message_status'] == 'ban':
                    await message.bot.delete_message(message.chat.id, message.message_id)
                    if is_logs_on['logs'] is True:
                        await message.answer(f'Banned photo id: <b>{is_banned['message_id']}</b>', parse_mode='HTML')
                return
        except Exception as e:
            logging.error(f'"check_message error": {e}')


class RegisterMessage():
    @staticmethod
    async def register_message_add_delete(message: Message, state:FSMContext, bot, **kwargs) -> None:
        userid = message.from_user.id
        try:
            if message.chat.type != 'private':
                return

            usersmodel: UsersModel = kwargs['usersmodel']

            groupmodel: GroupModel = kwargs['groupmodel']

            messagesmodel: MessagesModel = kwargs['messagesmodel']

            last_group = await messagesmodel.get_last_group(userid)

            if not last_group['last_group_update']:
                user_groups = await usersmodel.get_user_groups(userid)

                if not user_groups or not user_groups['status'] == 'ok':
                    await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø')
                    return

                await message.answer('–°—Ç–∞—Ä–∏—Ö –¥–∞–Ω–Ω–∏—Ö –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–∂–∞–ª—é—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=group_list([i['name'] for i in user_groups['groups']]))
                await state.update_data(g_list=[[i['name'], i['groupid']] for i in user_groups['groups']])
                await state.set_state(UserState.select_group_state)
                return

            is_user_creator = await groupmodel.is_user_creator(last_group['last_group_update'], message.from_user.id)

            if is_user_creator['result'] == 'creator':
                group = await groupmodel.get_group(last_group['last_group_update'])
                invite_link = await bot.export_chat_invite_link(last_group['last_group_update'])
                action = last_group['action']
                if action == 'remove':
                    if message.content_type == 'text':
                        result = await messagesmodel.delete_ban_message(last_group['last_group_update'], message.content_type,message.text)
                        if result['status'] == 'ok':
                            await message.answer(f'üìÑ –°–ª–æ–≤–æ "<b>{message.text}</b>" —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
                        return

                    elif message.content_type == 'sticker':
                        result= await messagesmodel.delete_ban_message(last_group['last_group_update'], message.content_type,message.sticker.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üîÆ –°—Ç–∏–∫–µ—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.sticker.file_unique_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
                        return

                    elif message.content_type == 'animation':
                        result = await messagesmodel.delete_ban_message(last_group['last_group_update'], message.content_type,message.animation.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üéû –ì–∏—Ñ —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.animation.file_unique_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–∏—Ñ –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
                        return

                    elif message.content_type == 'voice':
                        result = await messagesmodel.delete_ban_message(last_group['last_group_update'], message.content_type,message.voice.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.voice.file_unique_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
                        return

                    elif message.content_type == 'document':
                        result = await messagesmodel.delete_ban_message(last_group['last_group_update'], message.content_type,message.document.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üíæ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.document.file_unique_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
                        return

                    elif message.content_type == 'photo':
                        photo = message.photo[-1]
                        result = await messagesmodel.delete_ban_message(last_group['last_group_update'], message.content_type,photo.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üñº –§–æ—Ç–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{photo.file_unique_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
                        return

                    elif message.content_type == 'video':
                        result = await messagesmodel.delete_ban_message(last_group['last_group_update'], message.content_type,message.video.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üìπ –í–∏–¥–µ–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.video.file_unique_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
                        return

                    elif message.content_type == 'video_note':
                        result = await messagesmodel.delete_ban_message(last_group['last_group_update'], message.content_type,message.video_note.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üì∑ –ö—Ä—É–∂–æ–∫ —É–¥–∞–ª—ë–Ω –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.video_note.file_unique_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—Ä—É–∂–æ–∫ –∏–∑ –∑–∞–ø—Ä–µ—Ç–æ–≤.')
                        return

                else:
                    if message.content_type == 'text':
                        result = await messagesmodel.register_ban_message(last_group['last_group_update'], message.content_type, message.text)
                        if result['status'] == 'ok':
                            await message.answer(f'üìÑ –°–ª–æ–≤–æ "<b>{message.text}</b>" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.', parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –∑–∞–ø—Ä–µ—Ç—ã.')
                        return

                    elif message.content_type == 'sticker':
                        result = await messagesmodel.register_ban_message(last_group['last_group_update'], message.content_type, message.sticker.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üîÆ –°—Ç–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.sticker.file_unique_id}</b>', parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ –∑–∞–ø—Ä–µ—Ç—ã.')
                        return

                    elif message.content_type == 'animation':
                        result = await messagesmodel.register_ban_message(last_group['last_group_update'], message.content_type, message.animation.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üéû –ì–∏—Ñ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.animation.file_unique_id}</b>', parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥–∏—Ñ –≤ –∑–∞–ø—Ä–µ—Ç—ã.')
                        return

                    elif message.content_type == 'voice':
                        result = await messagesmodel.register_ban_message(last_group['last_group_update'], message.content_type, message.voice.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.voice.file_unique_id}</b>', parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ –∑–∞–ø—Ä–µ—Ç—ã.')
                        return

                    elif message.content_type == 'document':
                        result = await messagesmodel.register_ban_message(last_group['last_group_update'], message.content_type, message.document.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üíæ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.document.file_unique_id}</b>', parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∑–∞–ø—Ä–µ—Ç—ã.')
                        return

                    elif message.content_type == 'photo':
                        photo = message.photo[-1]
                        result = await messagesmodel.register_ban_message(last_group['last_group_update'], message.content_type, photo.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{photo.file_unique_id}</b>', parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –∑–∞–ø—Ä–µ—Ç—ã.')
                        return

                    elif message.content_type == 'video':
                        result = await messagesmodel.register_ban_message(last_group['last_group_update'], message.content_type, message.video.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üìπ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.video.file_unique_id}</b>', parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∑–∞–ø—Ä–µ—Ç—ã.')
                        return

                    elif message.content_type == 'video_note':
                        result = await messagesmodel.register_ban_message(last_group['last_group_update'], message.content_type, message.video_note.file_unique_id)
                        if result['status'] == 'ok':
                            await message.answer(f'üì∑ –ö—Ä—É–∂–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–µ—Ç—ã –¥–ª—è <a href="{invite_link}"><b>{group["name"]}</b></a>.\n\nID: <b>{message.video_note.file_unique_id}</b>',parse_mode='HTML', disable_web_page_preview=True)
                        else:
                            await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä—É–∂–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç—ã.')
                        return
        except Exception as e:
            logging.error(f'"register_message_add_delete error": {e}')